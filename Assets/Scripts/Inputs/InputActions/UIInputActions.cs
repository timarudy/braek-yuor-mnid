//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Inputs/InputActions/UIInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @UIInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @UIInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""UIInputActions"",
    ""maps"": [
        {
            ""name"": ""Notepad"",
            ""id"": ""eb2bcf60-24b8-49bb-8f5c-71d859662233"",
            ""actions"": [
                {
                    ""name"": ""Switch"",
                    ""type"": ""Button"",
                    ""id"": ""81d22280-d905-4ee4-a69c-d5bfe15d392c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""41027fa0-363a-4a06-87aa-a4c0d44e5565"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Switch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""WorldSpaceInput"",
            ""id"": ""47bd4b76-aab7-4bb1-96a4-b50cfd005a8c"",
            ""actions"": [
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""0f555260-1361-40f9-a45b-85510c25c6c6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Exit"",
                    ""type"": ""Button"",
                    ""id"": ""194fff0f-e08d-4a1e-8270-3354ca3db035"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""14aa2d35-c356-472d-a113-a21f0a832e99"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7eb75601-02c6-4b10-91d2-28899634bdbe"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Exit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Windows"",
            ""id"": ""b352b448-9055-40f5-a3aa-b2c5848471aa"",
            ""actions"": [
                {
                    ""name"": ""Settings"",
                    ""type"": ""Button"",
                    ""id"": ""7b6a25e4-4340-484d-a4fe-50d5da2d40bb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c44ebc11-71ed-42b3-89cc-0b5758b99249"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Settings"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Notepad
        m_Notepad = asset.FindActionMap("Notepad", throwIfNotFound: true);
        m_Notepad_Switch = m_Notepad.FindAction("Switch", throwIfNotFound: true);
        // WorldSpaceInput
        m_WorldSpaceInput = asset.FindActionMap("WorldSpaceInput", throwIfNotFound: true);
        m_WorldSpaceInput_Interact = m_WorldSpaceInput.FindAction("Interact", throwIfNotFound: true);
        m_WorldSpaceInput_Exit = m_WorldSpaceInput.FindAction("Exit", throwIfNotFound: true);
        // Windows
        m_Windows = asset.FindActionMap("Windows", throwIfNotFound: true);
        m_Windows_Settings = m_Windows.FindAction("Settings", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Notepad
    private readonly InputActionMap m_Notepad;
    private List<INotepadActions> m_NotepadActionsCallbackInterfaces = new List<INotepadActions>();
    private readonly InputAction m_Notepad_Switch;
    public struct NotepadActions
    {
        private @UIInputActions m_Wrapper;
        public NotepadActions(@UIInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Switch => m_Wrapper.m_Notepad_Switch;
        public InputActionMap Get() { return m_Wrapper.m_Notepad; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(NotepadActions set) { return set.Get(); }
        public void AddCallbacks(INotepadActions instance)
        {
            if (instance == null || m_Wrapper.m_NotepadActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_NotepadActionsCallbackInterfaces.Add(instance);
            @Switch.started += instance.OnSwitch;
            @Switch.performed += instance.OnSwitch;
            @Switch.canceled += instance.OnSwitch;
        }

        private void UnregisterCallbacks(INotepadActions instance)
        {
            @Switch.started -= instance.OnSwitch;
            @Switch.performed -= instance.OnSwitch;
            @Switch.canceled -= instance.OnSwitch;
        }

        public void RemoveCallbacks(INotepadActions instance)
        {
            if (m_Wrapper.m_NotepadActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(INotepadActions instance)
        {
            foreach (var item in m_Wrapper.m_NotepadActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_NotepadActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public NotepadActions @Notepad => new NotepadActions(this);

    // WorldSpaceInput
    private readonly InputActionMap m_WorldSpaceInput;
    private List<IWorldSpaceInputActions> m_WorldSpaceInputActionsCallbackInterfaces = new List<IWorldSpaceInputActions>();
    private readonly InputAction m_WorldSpaceInput_Interact;
    private readonly InputAction m_WorldSpaceInput_Exit;
    public struct WorldSpaceInputActions
    {
        private @UIInputActions m_Wrapper;
        public WorldSpaceInputActions(@UIInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Interact => m_Wrapper.m_WorldSpaceInput_Interact;
        public InputAction @Exit => m_Wrapper.m_WorldSpaceInput_Exit;
        public InputActionMap Get() { return m_Wrapper.m_WorldSpaceInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(WorldSpaceInputActions set) { return set.Get(); }
        public void AddCallbacks(IWorldSpaceInputActions instance)
        {
            if (instance == null || m_Wrapper.m_WorldSpaceInputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_WorldSpaceInputActionsCallbackInterfaces.Add(instance);
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @Exit.started += instance.OnExit;
            @Exit.performed += instance.OnExit;
            @Exit.canceled += instance.OnExit;
        }

        private void UnregisterCallbacks(IWorldSpaceInputActions instance)
        {
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @Exit.started -= instance.OnExit;
            @Exit.performed -= instance.OnExit;
            @Exit.canceled -= instance.OnExit;
        }

        public void RemoveCallbacks(IWorldSpaceInputActions instance)
        {
            if (m_Wrapper.m_WorldSpaceInputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IWorldSpaceInputActions instance)
        {
            foreach (var item in m_Wrapper.m_WorldSpaceInputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_WorldSpaceInputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public WorldSpaceInputActions @WorldSpaceInput => new WorldSpaceInputActions(this);

    // Windows
    private readonly InputActionMap m_Windows;
    private List<IWindowsActions> m_WindowsActionsCallbackInterfaces = new List<IWindowsActions>();
    private readonly InputAction m_Windows_Settings;
    public struct WindowsActions
    {
        private @UIInputActions m_Wrapper;
        public WindowsActions(@UIInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Settings => m_Wrapper.m_Windows_Settings;
        public InputActionMap Get() { return m_Wrapper.m_Windows; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(WindowsActions set) { return set.Get(); }
        public void AddCallbacks(IWindowsActions instance)
        {
            if (instance == null || m_Wrapper.m_WindowsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_WindowsActionsCallbackInterfaces.Add(instance);
            @Settings.started += instance.OnSettings;
            @Settings.performed += instance.OnSettings;
            @Settings.canceled += instance.OnSettings;
        }

        private void UnregisterCallbacks(IWindowsActions instance)
        {
            @Settings.started -= instance.OnSettings;
            @Settings.performed -= instance.OnSettings;
            @Settings.canceled -= instance.OnSettings;
        }

        public void RemoveCallbacks(IWindowsActions instance)
        {
            if (m_Wrapper.m_WindowsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IWindowsActions instance)
        {
            foreach (var item in m_Wrapper.m_WindowsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_WindowsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public WindowsActions @Windows => new WindowsActions(this);
    public interface INotepadActions
    {
        void OnSwitch(InputAction.CallbackContext context);
    }
    public interface IWorldSpaceInputActions
    {
        void OnInteract(InputAction.CallbackContext context);
        void OnExit(InputAction.CallbackContext context);
    }
    public interface IWindowsActions
    {
        void OnSettings(InputAction.CallbackContext context);
    }
}
