//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Inputs/InputActions/SLInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @SLInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @SLInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""SLInputActions"",
    ""maps"": [
        {
            ""name"": ""WateringCan"",
            ""id"": ""0d778908-79fd-4804-bc84-06f8afaeb982"",
            ""actions"": [
                {
                    ""name"": ""Water"",
                    ""type"": ""Button"",
                    ""id"": ""d779b68b-fd68-457b-8732-175ace95f4f0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""524cc57d-c9d5-4e74-a687-b3d2ab7bcb42"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Water"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""CraftTable"",
            ""id"": ""5b6b2576-1e0b-4971-9aed-dfee7c644e10"",
            ""actions"": [
                {
                    ""name"": ""MakeAxe"",
                    ""type"": ""Button"",
                    ""id"": ""cab9c5ab-7d2e-48c3-ae1a-7b696952e0bd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e5db3edb-2262-401a-9a31-86a7a2ec7c7e"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MakeAxe"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // WateringCan
        m_WateringCan = asset.FindActionMap("WateringCan", throwIfNotFound: true);
        m_WateringCan_Water = m_WateringCan.FindAction("Water", throwIfNotFound: true);
        // CraftTable
        m_CraftTable = asset.FindActionMap("CraftTable", throwIfNotFound: true);
        m_CraftTable_MakeAxe = m_CraftTable.FindAction("MakeAxe", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // WateringCan
    private readonly InputActionMap m_WateringCan;
    private List<IWateringCanActions> m_WateringCanActionsCallbackInterfaces = new List<IWateringCanActions>();
    private readonly InputAction m_WateringCan_Water;
    public struct WateringCanActions
    {
        private @SLInputActions m_Wrapper;
        public WateringCanActions(@SLInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Water => m_Wrapper.m_WateringCan_Water;
        public InputActionMap Get() { return m_Wrapper.m_WateringCan; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(WateringCanActions set) { return set.Get(); }
        public void AddCallbacks(IWateringCanActions instance)
        {
            if (instance == null || m_Wrapper.m_WateringCanActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_WateringCanActionsCallbackInterfaces.Add(instance);
            @Water.started += instance.OnWater;
            @Water.performed += instance.OnWater;
            @Water.canceled += instance.OnWater;
        }

        private void UnregisterCallbacks(IWateringCanActions instance)
        {
            @Water.started -= instance.OnWater;
            @Water.performed -= instance.OnWater;
            @Water.canceled -= instance.OnWater;
        }

        public void RemoveCallbacks(IWateringCanActions instance)
        {
            if (m_Wrapper.m_WateringCanActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IWateringCanActions instance)
        {
            foreach (var item in m_Wrapper.m_WateringCanActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_WateringCanActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public WateringCanActions @WateringCan => new WateringCanActions(this);

    // CraftTable
    private readonly InputActionMap m_CraftTable;
    private List<ICraftTableActions> m_CraftTableActionsCallbackInterfaces = new List<ICraftTableActions>();
    private readonly InputAction m_CraftTable_MakeAxe;
    public struct CraftTableActions
    {
        private @SLInputActions m_Wrapper;
        public CraftTableActions(@SLInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @MakeAxe => m_Wrapper.m_CraftTable_MakeAxe;
        public InputActionMap Get() { return m_Wrapper.m_CraftTable; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CraftTableActions set) { return set.Get(); }
        public void AddCallbacks(ICraftTableActions instance)
        {
            if (instance == null || m_Wrapper.m_CraftTableActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CraftTableActionsCallbackInterfaces.Add(instance);
            @MakeAxe.started += instance.OnMakeAxe;
            @MakeAxe.performed += instance.OnMakeAxe;
            @MakeAxe.canceled += instance.OnMakeAxe;
        }

        private void UnregisterCallbacks(ICraftTableActions instance)
        {
            @MakeAxe.started -= instance.OnMakeAxe;
            @MakeAxe.performed -= instance.OnMakeAxe;
            @MakeAxe.canceled -= instance.OnMakeAxe;
        }

        public void RemoveCallbacks(ICraftTableActions instance)
        {
            if (m_Wrapper.m_CraftTableActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICraftTableActions instance)
        {
            foreach (var item in m_Wrapper.m_CraftTableActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CraftTableActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CraftTableActions @CraftTable => new CraftTableActions(this);
    public interface IWateringCanActions
    {
        void OnWater(InputAction.CallbackContext context);
    }
    public interface ICraftTableActions
    {
        void OnMakeAxe(InputAction.CallbackContext context);
    }
}
